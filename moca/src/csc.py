# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_csc', [dirname(__file__)])
        except ImportError:
            import _csc
            return _csc
        if fp is not None:
            try:
                _mod = imp.load_module('_csc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _csc = swig_import_helper()
    del swig_import_helper
else:
    import _csc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _csc.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _csc.SwigPyIterator_value(self)
    def incr(self, n=1): return _csc.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _csc.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _csc.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _csc.SwigPyIterator_equal(self, *args)
    def copy(self): return _csc.SwigPyIterator_copy(self)
    def next(self): return _csc.SwigPyIterator_next(self)
    def __next__(self): return _csc.SwigPyIterator___next__(self)
    def previous(self): return _csc.SwigPyIterator_previous(self)
    def advance(self, *args): return _csc.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _csc.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _csc.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _csc.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _csc.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _csc.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _csc.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _csc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _csc.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _csc.IntVector___nonzero__(self)
    def __bool__(self): return _csc.IntVector___bool__(self)
    def __len__(self): return _csc.IntVector___len__(self)
    def pop(self): return _csc.IntVector_pop(self)
    def __getslice__(self, *args): return _csc.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _csc.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _csc.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _csc.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _csc.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _csc.IntVector___setitem__(self, *args)
    def append(self, *args): return _csc.IntVector_append(self, *args)
    def empty(self): return _csc.IntVector_empty(self)
    def size(self): return _csc.IntVector_size(self)
    def clear(self): return _csc.IntVector_clear(self)
    def swap(self, *args): return _csc.IntVector_swap(self, *args)
    def get_allocator(self): return _csc.IntVector_get_allocator(self)
    def begin(self): return _csc.IntVector_begin(self)
    def end(self): return _csc.IntVector_end(self)
    def rbegin(self): return _csc.IntVector_rbegin(self)
    def rend(self): return _csc.IntVector_rend(self)
    def pop_back(self): return _csc.IntVector_pop_back(self)
    def erase(self, *args): return _csc.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _csc.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _csc.IntVector_push_back(self, *args)
    def front(self): return _csc.IntVector_front(self)
    def back(self): return _csc.IntVector_back(self)
    def assign(self, *args): return _csc.IntVector_assign(self, *args)
    def resize(self, *args): return _csc.IntVector_resize(self, *args)
    def insert(self, *args): return _csc.IntVector_insert(self, *args)
    def reserve(self, *args): return _csc.IntVector_reserve(self, *args)
    def capacity(self): return _csc.IntVector_capacity(self)
    __swig_destroy__ = _csc.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _csc.IntVector_swigregister
IntVector_swigregister(IntVector)

class UIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UIntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _csc.UIntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _csc.UIntVector___nonzero__(self)
    def __bool__(self): return _csc.UIntVector___bool__(self)
    def __len__(self): return _csc.UIntVector___len__(self)
    def pop(self): return _csc.UIntVector_pop(self)
    def __getslice__(self, *args): return _csc.UIntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _csc.UIntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _csc.UIntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _csc.UIntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _csc.UIntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _csc.UIntVector___setitem__(self, *args)
    def append(self, *args): return _csc.UIntVector_append(self, *args)
    def empty(self): return _csc.UIntVector_empty(self)
    def size(self): return _csc.UIntVector_size(self)
    def clear(self): return _csc.UIntVector_clear(self)
    def swap(self, *args): return _csc.UIntVector_swap(self, *args)
    def get_allocator(self): return _csc.UIntVector_get_allocator(self)
    def begin(self): return _csc.UIntVector_begin(self)
    def end(self): return _csc.UIntVector_end(self)
    def rbegin(self): return _csc.UIntVector_rbegin(self)
    def rend(self): return _csc.UIntVector_rend(self)
    def pop_back(self): return _csc.UIntVector_pop_back(self)
    def erase(self, *args): return _csc.UIntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _csc.new_UIntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _csc.UIntVector_push_back(self, *args)
    def front(self): return _csc.UIntVector_front(self)
    def back(self): return _csc.UIntVector_back(self)
    def assign(self, *args): return _csc.UIntVector_assign(self, *args)
    def resize(self, *args): return _csc.UIntVector_resize(self, *args)
    def insert(self, *args): return _csc.UIntVector_insert(self, *args)
    def reserve(self, *args): return _csc.UIntVector_reserve(self, *args)
    def capacity(self): return _csc.UIntVector_capacity(self)
    __swig_destroy__ = _csc.delete_UIntVector
    __del__ = lambda self : None;
UIntVector_swigregister = _csc.UIntVector_swigregister
UIntVector_swigregister(UIntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _csc.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _csc.DoubleVector___nonzero__(self)
    def __bool__(self): return _csc.DoubleVector___bool__(self)
    def __len__(self): return _csc.DoubleVector___len__(self)
    def pop(self): return _csc.DoubleVector_pop(self)
    def __getslice__(self, *args): return _csc.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _csc.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _csc.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _csc.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _csc.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _csc.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _csc.DoubleVector_append(self, *args)
    def empty(self): return _csc.DoubleVector_empty(self)
    def size(self): return _csc.DoubleVector_size(self)
    def clear(self): return _csc.DoubleVector_clear(self)
    def swap(self, *args): return _csc.DoubleVector_swap(self, *args)
    def get_allocator(self): return _csc.DoubleVector_get_allocator(self)
    def begin(self): return _csc.DoubleVector_begin(self)
    def end(self): return _csc.DoubleVector_end(self)
    def rbegin(self): return _csc.DoubleVector_rbegin(self)
    def rend(self): return _csc.DoubleVector_rend(self)
    def pop_back(self): return _csc.DoubleVector_pop_back(self)
    def erase(self, *args): return _csc.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _csc.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _csc.DoubleVector_push_back(self, *args)
    def front(self): return _csc.DoubleVector_front(self)
    def back(self): return _csc.DoubleVector_back(self)
    def assign(self, *args): return _csc.DoubleVector_assign(self, *args)
    def resize(self, *args): return _csc.DoubleVector_resize(self, *args)
    def insert(self, *args): return _csc.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _csc.DoubleVector_reserve(self, *args)
    def capacity(self): return _csc.DoubleVector_capacity(self)
    __swig_destroy__ = _csc.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _csc.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _csc.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _csc.StringVector___nonzero__(self)
    def __bool__(self): return _csc.StringVector___bool__(self)
    def __len__(self): return _csc.StringVector___len__(self)
    def pop(self): return _csc.StringVector_pop(self)
    def __getslice__(self, *args): return _csc.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _csc.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _csc.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _csc.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _csc.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _csc.StringVector___setitem__(self, *args)
    def append(self, *args): return _csc.StringVector_append(self, *args)
    def empty(self): return _csc.StringVector_empty(self)
    def size(self): return _csc.StringVector_size(self)
    def clear(self): return _csc.StringVector_clear(self)
    def swap(self, *args): return _csc.StringVector_swap(self, *args)
    def get_allocator(self): return _csc.StringVector_get_allocator(self)
    def begin(self): return _csc.StringVector_begin(self)
    def end(self): return _csc.StringVector_end(self)
    def rbegin(self): return _csc.StringVector_rbegin(self)
    def rend(self): return _csc.StringVector_rend(self)
    def pop_back(self): return _csc.StringVector_pop_back(self)
    def erase(self, *args): return _csc.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _csc.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _csc.StringVector_push_back(self, *args)
    def front(self): return _csc.StringVector_front(self)
    def back(self): return _csc.StringVector_back(self)
    def assign(self, *args): return _csc.StringVector_assign(self, *args)
    def resize(self, *args): return _csc.StringVector_resize(self, *args)
    def insert(self, *args): return _csc.StringVector_insert(self, *args)
    def reserve(self, *args): return _csc.StringVector_reserve(self, *args)
    def capacity(self): return _csc.StringVector_capacity(self)
    __swig_destroy__ = _csc.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _csc.StringVector_swigregister
StringVector_swigregister(StringVector)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _csc.ConstCharVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _csc.ConstCharVector___nonzero__(self)
    def __bool__(self): return _csc.ConstCharVector___bool__(self)
    def __len__(self): return _csc.ConstCharVector___len__(self)
    def pop(self): return _csc.ConstCharVector_pop(self)
    def __getslice__(self, *args): return _csc.ConstCharVector___getslice__(self, *args)
    def __setslice__(self, *args): return _csc.ConstCharVector___setslice__(self, *args)
    def __delslice__(self, *args): return _csc.ConstCharVector___delslice__(self, *args)
    def __delitem__(self, *args): return _csc.ConstCharVector___delitem__(self, *args)
    def __getitem__(self, *args): return _csc.ConstCharVector___getitem__(self, *args)
    def __setitem__(self, *args): return _csc.ConstCharVector___setitem__(self, *args)
    def append(self, *args): return _csc.ConstCharVector_append(self, *args)
    def empty(self): return _csc.ConstCharVector_empty(self)
    def size(self): return _csc.ConstCharVector_size(self)
    def clear(self): return _csc.ConstCharVector_clear(self)
    def swap(self, *args): return _csc.ConstCharVector_swap(self, *args)
    def get_allocator(self): return _csc.ConstCharVector_get_allocator(self)
    def begin(self): return _csc.ConstCharVector_begin(self)
    def end(self): return _csc.ConstCharVector_end(self)
    def rbegin(self): return _csc.ConstCharVector_rbegin(self)
    def rend(self): return _csc.ConstCharVector_rend(self)
    def pop_back(self): return _csc.ConstCharVector_pop_back(self)
    def erase(self, *args): return _csc.ConstCharVector_erase(self, *args)
    def __init__(self, *args): 
        this = _csc.new_ConstCharVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _csc.ConstCharVector_push_back(self, *args)
    def front(self): return _csc.ConstCharVector_front(self)
    def back(self): return _csc.ConstCharVector_back(self)
    def assign(self, *args): return _csc.ConstCharVector_assign(self, *args)
    def resize(self, *args): return _csc.ConstCharVector_resize(self, *args)
    def insert(self, *args): return _csc.ConstCharVector_insert(self, *args)
    def reserve(self, *args): return _csc.ConstCharVector_reserve(self, *args)
    def capacity(self): return _csc.ConstCharVector_capacity(self)
    __swig_destroy__ = _csc.delete_ConstCharVector
    __del__ = lambda self : None;
ConstCharVector_swigregister = _csc.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class ConstStringViewVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstStringViewVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstStringViewVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _csc.ConstStringViewVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _csc.ConstStringViewVector___nonzero__(self)
    def __bool__(self): return _csc.ConstStringViewVector___bool__(self)
    def __len__(self): return _csc.ConstStringViewVector___len__(self)
    def pop(self): return _csc.ConstStringViewVector_pop(self)
    def __getslice__(self, *args): return _csc.ConstStringViewVector___getslice__(self, *args)
    def __setslice__(self, *args): return _csc.ConstStringViewVector___setslice__(self, *args)
    def __delslice__(self, *args): return _csc.ConstStringViewVector___delslice__(self, *args)
    def __delitem__(self, *args): return _csc.ConstStringViewVector___delitem__(self, *args)
    def __getitem__(self, *args): return _csc.ConstStringViewVector___getitem__(self, *args)
    def __setitem__(self, *args): return _csc.ConstStringViewVector___setitem__(self, *args)
    def append(self, *args): return _csc.ConstStringViewVector_append(self, *args)
    def empty(self): return _csc.ConstStringViewVector_empty(self)
    def size(self): return _csc.ConstStringViewVector_size(self)
    def clear(self): return _csc.ConstStringViewVector_clear(self)
    def swap(self, *args): return _csc.ConstStringViewVector_swap(self, *args)
    def get_allocator(self): return _csc.ConstStringViewVector_get_allocator(self)
    def begin(self): return _csc.ConstStringViewVector_begin(self)
    def end(self): return _csc.ConstStringViewVector_end(self)
    def rbegin(self): return _csc.ConstStringViewVector_rbegin(self)
    def rend(self): return _csc.ConstStringViewVector_rend(self)
    def pop_back(self): return _csc.ConstStringViewVector_pop_back(self)
    def erase(self, *args): return _csc.ConstStringViewVector_erase(self, *args)
    def __init__(self, *args): 
        this = _csc.new_ConstStringViewVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _csc.ConstStringViewVector_push_back(self, *args)
    def front(self): return _csc.ConstStringViewVector_front(self)
    def back(self): return _csc.ConstStringViewVector_back(self)
    def assign(self, *args): return _csc.ConstStringViewVector_assign(self, *args)
    def resize(self, *args): return _csc.ConstStringViewVector_resize(self, *args)
    def insert(self, *args): return _csc.ConstStringViewVector_insert(self, *args)
    def reserve(self, *args): return _csc.ConstStringViewVector_reserve(self, *args)
    def capacity(self): return _csc.ConstStringViewVector_capacity(self)
    __swig_destroy__ = _csc.delete_ConstStringViewVector
    __del__ = lambda self : None;
ConstStringViewVector_swigregister = _csc.ConstStringViewVector_swigregister
ConstStringViewVector_swigregister(ConstStringViewVector)

class ChromInfoVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChromInfoVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChromInfoVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _csc.ChromInfoVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _csc.ChromInfoVector___nonzero__(self)
    def __bool__(self): return _csc.ChromInfoVector___bool__(self)
    def __len__(self): return _csc.ChromInfoVector___len__(self)
    def pop(self): return _csc.ChromInfoVector_pop(self)
    def __getslice__(self, *args): return _csc.ChromInfoVector___getslice__(self, *args)
    def __setslice__(self, *args): return _csc.ChromInfoVector___setslice__(self, *args)
    def __delslice__(self, *args): return _csc.ChromInfoVector___delslice__(self, *args)
    def __delitem__(self, *args): return _csc.ChromInfoVector___delitem__(self, *args)
    def __getitem__(self, *args): return _csc.ChromInfoVector___getitem__(self, *args)
    def __setitem__(self, *args): return _csc.ChromInfoVector___setitem__(self, *args)
    def append(self, *args): return _csc.ChromInfoVector_append(self, *args)
    def empty(self): return _csc.ChromInfoVector_empty(self)
    def size(self): return _csc.ChromInfoVector_size(self)
    def clear(self): return _csc.ChromInfoVector_clear(self)
    def swap(self, *args): return _csc.ChromInfoVector_swap(self, *args)
    def get_allocator(self): return _csc.ChromInfoVector_get_allocator(self)
    def begin(self): return _csc.ChromInfoVector_begin(self)
    def end(self): return _csc.ChromInfoVector_end(self)
    def rbegin(self): return _csc.ChromInfoVector_rbegin(self)
    def rend(self): return _csc.ChromInfoVector_rend(self)
    def pop_back(self): return _csc.ChromInfoVector_pop_back(self)
    def erase(self, *args): return _csc.ChromInfoVector_erase(self, *args)
    def __init__(self, *args): 
        this = _csc.new_ChromInfoVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _csc.ChromInfoVector_push_back(self, *args)
    def front(self): return _csc.ChromInfoVector_front(self)
    def back(self): return _csc.ChromInfoVector_back(self)
    def assign(self, *args): return _csc.ChromInfoVector_assign(self, *args)
    def resize(self, *args): return _csc.ChromInfoVector_resize(self, *args)
    def insert(self, *args): return _csc.ChromInfoVector_insert(self, *args)
    def reserve(self, *args): return _csc.ChromInfoVector_reserve(self, *args)
    def capacity(self): return _csc.ChromInfoVector_capacity(self)
    __swig_destroy__ = _csc.delete_ChromInfoVector
    __del__ = lambda self : None;
ChromInfoVector_swigregister = _csc.ChromInfoVector_swigregister
ChromInfoVector_swigregister(ChromInfoVector)

class genome_table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, genome_table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, genome_table, name)
    __repr__ = _swig_repr
    __swig_setmethods__["contigs"] = _csc.genome_table_contigs_set
    __swig_getmethods__["contigs"] = _csc.genome_table_contigs_get
    if _newclass:contigs = _swig_property(_csc.genome_table_contigs_get, _csc.genome_table_contigs_set)
    __swig_setmethods__["contig_sizes"] = _csc.genome_table_contig_sizes_set
    __swig_getmethods__["contig_sizes"] = _csc.genome_table_contig_sizes_get
    if _newclass:contig_sizes = _swig_property(_csc.genome_table_contig_sizes_get, _csc.genome_table_contig_sizes_set)
    def __init__(self, *args): 
        this = _csc.new_genome_table(*args)
        try: self.this.append(this)
        except: self.this = this
    def load(self, *args): return _csc.genome_table_load(self, *args)
    def contig_ind(self, *args): return _csc.genome_table_contig_ind(self, *args)
    def contig_size(self, *args): return _csc.genome_table_contig_size(self, *args)
    def size(self): return _csc.genome_table_size(self)
    def compare_coordinates(self, *args): return _csc.genome_table_compare_coordinates(self, *args)
    __swig_destroy__ = _csc.delete_genome_table
    __del__ = lambda self : None;
genome_table_swigregister = _csc.genome_table_swigregister
genome_table_swigregister(genome_table)

class chrom_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, chrom_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, chrom_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chrom"] = _csc.chrom_info_chrom_set
    __swig_getmethods__["chrom"] = _csc.chrom_info_chrom_get
    if _newclass:chrom = _swig_property(_csc.chrom_info_chrom_get, _csc.chrom_info_chrom_set)
    __swig_setmethods__["size"] = _csc.chrom_info_size_set
    __swig_getmethods__["size"] = _csc.chrom_info_size_get
    if _newclass:size = _swig_property(_csc.chrom_info_size_get, _csc.chrom_info_size_set)
    __swig_setmethods__["offset"] = _csc.chrom_info_offset_set
    __swig_getmethods__["offset"] = _csc.chrom_info_offset_get
    if _newclass:offset = _swig_property(_csc.chrom_info_offset_get, _csc.chrom_info_offset_set)
    __swig_setmethods__["buckets"] = _csc.chrom_info_buckets_set
    __swig_getmethods__["buckets"] = _csc.chrom_info_buckets_get
    if _newclass:buckets = _swig_property(_csc.chrom_info_buckets_get, _csc.chrom_info_buckets_set)
    def __init__(self): 
        this = _csc.new_chrom_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csc.delete_chrom_info
    __del__ = lambda self : None;
chrom_info_swigregister = _csc.chrom_info_swigregister
chrom_info_swigregister(chrom_info)

class genome_hash_table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, genome_hash_table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, genome_hash_table, name)
    __repr__ = _swig_repr
    def size(self): return _csc.genome_hash_table_size(self)
    def __init__(self, *args): 
        this = _csc.new_genome_hash_table(*args)
        try: self.this.append(this)
        except: self.this = this
    def hash_value(self, *args): return _csc.genome_hash_table_hash_value(self, *args)
    def dist_to_left_boundary(self, *args): return _csc.genome_hash_table_dist_to_left_boundary(self, *args)
    def dist_to_right_boundary(self, *args): return _csc.genome_hash_table_dist_to_right_boundary(self, *args)
    __swig_destroy__ = _csc.delete_genome_hash_table
    __del__ = lambda self : None;
genome_hash_table_swigregister = _csc.genome_hash_table_swigregister
genome_hash_table_swigregister(genome_hash_table)


def split(*args):
  return _csc.split(*args)
split = _csc.split

def get_string_count(*args):
  return _csc.get_string_count(*args)
get_string_count = _csc.get_string_count

def chomp(*args):
  return _csc.chomp(*args)
chomp = _csc.chomp

def perc_file_length(*args):
  return _csc.perc_file_length(*args)
perc_file_length = _csc.perc_file_length

def k_pow(*args):
  return _csc.k_pow(*args)
k_pow = _csc.k_pow

def long_k_pow(*args):
  return _csc.long_k_pow(*args)
long_k_pow = _csc.long_k_pow

def commify(*args):
  return _csc.commify(*args)
commify = _csc.commify

def commify_long(*args):
  return _csc.commify_long(*args)
commify_long = _csc.commify_long

def int2string(*args):
  return _csc.int2string(*args)
int2string = _csc.int2string

def read_wig(*args):
  return _csc.read_wig(*args)
read_wig = _csc.read_wig
# This file is compatible with both classic and new-style classes.


